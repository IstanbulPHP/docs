goals do
  goal "Be able to use the basic building blocks of PHP code"
  goal "Use Boris to run PHP code"
  goal "Do simple calculations"
  goal "Use and understand variables"
  goal "Use and understand arrays"
  goal "Use built-in functions"
  goal "Use loops and conditional statements"
  goal "Create and use a custom function"
end

steps do

  step do
    message "Start your PHP environment from the terminal, using vagrant:"

    console_without_message "vagrant up"

    message "Once this has completed, connect to the virtual machine:"

    console_without_message "vagrant ssh"
  end 

  step do
    message "Type this in the terminal to start Psy Shell, a program which lets you try out PHP code:"

    console_without_message "psysh"
    
	  message "Yours might look different, but it should look something like this:"
	
	  console_without_message "Psy Shell v0.1.4 (PHP 5.5.3 ‚Äî cli) by Justin Hileman\n>>>"
  end

  step do
    message "Next try some simple math that's built into PHP. Type these lines into psysh:"
    console_without_message "3 + 3;\n7 * 6;"
  end

  step do
    message "**Variables** are names with values assigned to them. Each name starts with the `$` symbol."

    console_without_message "$my_variable = 5;"

    message "This assigns the value `5` to the name `$my_variable`."
  end

  step do
    message "You can also do math with variables:"
    console_without_message <<-PHP
$my_variable + 2;
$my_variable * 3;
    PHP
  end

  step do
    message "Variables can also hold more than one value. This is called an **array**."

    console_without_message '$fruits = ["kiwi", "strawberry", "plum"];'

    message "Here we're using the variable `$fruits` to hold a collection of fruit names."
  end

  step do
     message "Each value in an array has a key. These can be numbers or words:"

     console_without_message '$fruits = [2 => "kiwi", "berry" => "strawberry", 6 => "plum"];'

     message "If you do not specify a key, they will be numbers starting from zero, or the last number."
  end

  step do
    message "You can easily add a new value to an array:"

    console_without_message '$fruits[] = "orange";'
  end

  step do
    message "You can also remove items from an array:"

    console_without_message 'unset($fruits["berry"]);'
    
    message "Or remove the last item added:"
    
    console_without_message 'array_pop($fruits);'
  end

  step do
    message "To inspect your array, you can use a built-in function"

    console_without_message 'print_r($fruits);'

    message "For more detailed information about the variable, you can use `var_dump()`"

    console_without_message 'var_dump($fruits);'
  end

  step do
    message "A **conditional** runs code only when a statement evaluates to true."

    console_without_message <<-PHP
if ($my_variable > 1) {
  echo "YAY!";
}
    PHP

    message "This prints `YAY!` if the value stored in `$my_variable` is greater than 1."

    message "Try changing the `>` in the conditional to a `<`."

    message "`<` and `>` are called operators. There are many kinds of operators such as the `+`, `-`, `*` and `/` arithmetic operators."
  end

  step do
     message "To perform an action if the conditional statement does not evaluate to true, we use `else`:"

     console_without_message <<-PHP
if ($my_variable < 1) {
	echo "YAY!";
} else {
	echo "OH NOES! üò¢";
}
     PHP
  end

  step do
    message "You can combine these two, to add more conditionals using `elseif`:"

    console_without_message <<-PHP
if ($my_variable < 1) {
  echo "YAY!";
} elseif ($my_variable > 4) {
  echo "YIPPEE! üòç";
} else {
  echo "OH NOES! üò¢";
}
    PHP
  end

  step do
    message "A common operation is to perform the same task on each value in an array. We call this looping, or iteration."

    message "The simplest loop, is known as a `while` loop which will iterate until a given condition returns false:"

    console_without_message <<-PHP
      $fruits = ["kiwi", "plum", "orange", "banana"];
      $i = 0;
      while ($i < sizeof($fruits)) {
        echo $fruits[$i] . PHP_EOL;
        $i++;
      }
    PHP
  end

  step do
    message <<-MARKDOWN
Another common loop, is known as the `for` loop. This loop has three conditions:

- The first condition is evaluated at the beginning no matter what
- The second is evaluated at the beginning of each iteration, and will cause the loop to end when it returns false (just like a while loop!)
- The third is evaluated at the end of each iteration
    MARKDOWN

    console_without_message <<-PHP
  for ($i = 0; $i < sizeof($fruits), $i++) {
    echo $fruits[$i] . PHP_EOL;
  }
    PHP
  end

  step do
    message "Another common loop is `foreach` which is the most common and easiest way to loop through an array:"

    console_without_message <<-PHP
  foreach ($fruits as $fruit) {
    echo $fruit . PHP_EOL;
  }
    PHP
  end

  step do
    message "While PHP features thousands of built-in functions, you can also make your own:"
    console_without_message <<-PHP
function happy()
{
  echo "YAY!";
}
    PHP

    message "You run the function just like a built-in function:"

    console_without_message "happy();"
  end

  step do
    console_without_message <<-PHP
function pluralize($word)
{
  return $word . "s";
}
pluralize("kiwi");
    PHP

    message "Functions can take **parameters**, which are the variables they work on. In this case, we made a function called `pluralize` that takes one parameter, a word."

    message "Functions can also return data. In this case, pluralize returns the word with an 's' added to the end of it. In PHP, we use the `return` keyword to do this."
  end
end

next_step "getting_started"
